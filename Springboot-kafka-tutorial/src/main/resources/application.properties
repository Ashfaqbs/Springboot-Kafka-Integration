spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
##sending objects so value we are changing
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

##Producer
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer



##Explaination
#spring.kafka.consumer.group-id=myGroup
#Certainly! Let's explain the concept of a Kafka consumer group and the group-id in simple terms.
#
#Imagine you have a team of people who need to read and process a bunch of 
#letters that are arriving in your mailbox. Each letter represents a message in Kafka.
#
#Now, if you give everyone in your team a copy of every letter (message), 
#they might all read the same letter multiple times, which is not efficient. So, you want to organize your team in a way that each letter is read by only one person, and they work together efficiently.
#
#Here's how it works:
#
#Consumer Group: Think of your team as a "consumer group." This group is 
#like a team of people (consumers) who work together to read the letters (messages) from your mailbox (Kafka topics).
#
#Group ID: The group-id is like a special name you give to your team (consumer group). 
#This name ensures that only one team (consumer group) reads each letter (message) once, even if your team has multiple people (consumers). It's like putting a label on your team to say,
# "Hey, this is my team, and we're going to work together."
#
#Efficient Reading: With the group-id, Kafka makes sure that each letter (message) is read by 
#only one team (consumer group). If someone on your team takes a break or if you add more people to your team, Kafka automatically manages who reads what, so no letter is missed, and there's no extra work.
#
#So, in simple terms, the group-id is like giving a name to your team of people (consumers) 
#who work together to read and process messages from Kafka. It ensures that messages are read efficiently, without duplication, and even if you change your team or some team members take breaks.


#spring.kafka.consumer.auto-offset-reset
#Determines where the consumer starts reading messages when it doesn't have a committed offset yet. 
#earliest" means it starts from the earliest available message.
#Certainly! Let's explain the spring.kafka.consumer.auto-offset-reset property in simple terms.
#
#Think of Kafka like a continuous stream of messages, where each message has an order or position, 
#just like pages in a book. When you start reading Kafka messages as a consumer, you need to know where 
#to begin:
#
#auto-offset-reset: This property tells Kafka what to do when you, as a consumer, start reading
# from a topic but don't have a specific starting point.
#Now, let's break it down:
#
#Starting to Read: Imagine you're reading a book, but you don't remember which page you left off on.
# You have a few options:
#
#earliest: This means you'll start reading from the very beginning of the book, from page one. 
#In Kafka terms, it's like starting to read messages from the very first message in the topic,
# regardless of when they were written. It's like going back to the beginning of the story.
#
#latest: This means you'll start reading from the latest page of the book, as if you never missed 
#anything. In Kafka, this means starting to read messages that are being written to the topic right now. 
#It's like picking up the book from where you left off recently.
#
#none: This means Kafka won't automatically set a starting point for you. You'll need to specify e
#xactly where you want to start reading. It's like having a bookmark in your book that you manually 
#place on a specific page before you start reading.
#
#So, spring.kafka.consumer.auto-offset-reset is like telling Kafka what to do when you join the 
#reading (consuming) process and don't remember where you left off. Do you want to start from the very 
#beginning (earliest), pick up from the latest (latest), or specify your starting point (none)? 
#It helps ensure you read the Kafka messages in the way that makes the most sense for your use case.